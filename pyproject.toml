[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mermaid_sphinx"
version = "0.1.0"
description = "Parse the .mmd files for the sphinx documentation"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "Fabian Lamers", email = "grove@llss.nl" }
]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "sphinx",
]

[project.optional-dependencies]
dev = [
    "black",
    "build",
    "coverage[toml]",
    "mypy",
    "pre-commit",
    "pytest",
    "ruff",
    "sphinx",
    "twine",
    "types-docutils"
]
docs = [
    "furo",
    "sphinx",
    "sphinx-copybutton",
    "sphinx-inline-tabs",
    "pre-commit",

]

[tool.setuptools.packages.find]
where = ["."]
include = ["mermaid_sphinx"]


[project.scripts]
firewall_block = "mermaid_sphinx.main:main"

[tool.coverage.run]
branch = true
omit = [
    "*site-packages*",
    # omit tests folder
    "*/tests/*",
    "*/testing/*",
    ]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true
show_missing = true


[tool.ruff]
# Exclude a variety of commonly ignored directories.
extend-exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "todo/migrations"
]

# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D203",  # incorrect-blank-line-before-class
    "D212",  # multi-line-summary-first-line
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"


[tool.ruff.lint.per-file-ignores]
"**/__init__.py"= ["D104"]  # undocumented-public-package
"docs/source/conf.py"= ["A001"]  # builtin-variable-shadowing
"tests/**"= [
    "A",  # flake8-builtins
    "ANN",  # flake8-annotations
    "D",  # pydocstyle
    "PLR2004",  # magic-value-comparison
    "S101",  # assert
]

[tool.ruff.lint.isort]
order-by-type = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.black]
line-length = 120

[tool.mypy]
exclude = [
    "venv/*",
]

check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "testing.*"
disallow_untyped_defs = false
